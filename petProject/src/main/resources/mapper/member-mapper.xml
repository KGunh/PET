<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="memberMapper">

	<resultMap type="attachment" id="attachmentResultSet">
		<result column="ATT_NO" property="attNo"/>
		<result column="ATT_PATH" property="attPath"/>
		<result column="ORIGIN_NAME" property="originName"/>
		<result column="CHANGE_NAME" property="changeName"/>
		<result column="ATT_STATUS" property="attStaus"/>
		<result column="BOARD_NO" property="boardNo"/>
		<result column="ATT_LELVEL" property="attLevel"/>
	</resultMap>
	
	<resultMap type="comment" id="commentResultSet">
		<result column="COMMENT_NO" property="commentNo"/>
		<result column="REPLY_NO" property="replyNo"/>
		<result column="COMMENT_WRITER" property="commentWriter"/>
		<result column="COMMENT_CONTENT" property="commentContent"/>
		<result column="COMMENT_CREATE_DATE" property="createDate"/>
		<result column="COMMENT_UPDATE_DATE" property="updateDate"/>
		<result column="COMMENT_STATUS" property="commentStatus"/>
	</resultMap>
	
	<resultMap type="reply" id="replyResultSet">
		<result column="REPLY_NO" property="replyNo"/>
		<result column="REPLY_WRITER" property="replyWriter"/>
		<result column="REPLY_CONTENT" property="replyContent"/>
		<result column="REPLY_CREATE_DATE" property="createDate"/>
		<result column="REPLY_UPDATE_DATE" property="updateDate"/>
		<result column="REPLY_STATUS" property="replyStatus"/>
		<collection resultMap="commentResultSet" property="commentList" />
	</resultMap>
	
	<resultMap type="info" id="infoResultSet">
		<result column="BOARD_NO" property="boardNo"/>
		<result column="BOARD_TITLE" property="boardTitle"/>
		<result column="BOARD_CONTENT" property="boardContent"/>
		<result column="BOARD_COUNT" property="boardCount"/>
		<result column="CREATE_DATE" property="createDate" />
		<result column="BOARD_WRITER" property="memberNo"/>
		<result column="BO_CATEGORY_NAME" property="categoryCode"/>
		<result column="UPDATE_DATE" property="updateDate"/>
		<result column="BOARD_STATUS" property="boardStatus"/>
		<result column="CATEGORY_CODE" property="categoryCode"/>
		<result column="MEMBER_NO" property="memberNo"/>
		<result column="BOARD_LIKE" property="boardLike"/>
		<result column="SUM_COUNT" property="sumCount"/>
		<result column="LIKECHECK" property="likeCheck" />
		
		<collection resultMap="attachmentResultSet" property="attachmentList"/>
		
		<collection resultMap="replyResultSet" property="replyList"/>

		<collection resultMap="animalResultSet" property="animalList"/>
	</resultMap>

	<resultMap type="animal" id="animalResultSet">
		<result column="ANIMAL_NAME" property="animalName"/>
		<result column="ANIMAL_CODE" property="animalCode"/>
	    <result column="MEMBER_NO" property="memberNo"/>
	</resultMap>

	<resultMap type="coupon" id="couponResultSet">
		<result column="COUPON_NO" property="couponNo"/>
		<result column="COUPON_NAME" property="couponName"/>
		<result column="CREATE_DATE" property="createDate"/>
		<result column="END_DATE" property="endDate"/>
		<result column="DISCOUNT_RATE" property="discountRate"/>
		<result column="COUPON_STATUS" property="couponStatus"/>
	</resultMap>
	
	<resultMap type="memberCoupon" id="memberCouponResultSet">
		<result column="ISSUE_DATE" property="issueDate"/>
		<result column="COUPON_NO" property="couponNo"/>
		<result column="MEMBER_COUPON_STATUS" property="memberCouponStatus"/>
		<collection resultMap="couponResultSet" property="coupon"/>	
	</resultMap>
	
	<resultMap type="member" id="memberResultSet">
		<result column="MEMBER_NO" property="memberNo"/>
		<result column="MEMBER_ID" property="memberId"/>
		<result column="MEMBER_PWD" property="memberPwd"/>
		<result column="MEMBER_NAME" property="memberName"/>
		<result column="EMAIL" property="email"/>
		<result column="NICKNAME" property="nickname"/>
		<result column="PHONE" property="phone"/>
		<result column="MEMBER_STATUS" property="memberStatus"/>
		<result column="MEMBER_PROFILE" property="profile"/>
		<result column="ANIMAL_NAME" property="animalName"/>
		<result column="ANIMAL_CODE" property="animalCode"/>
		<collection resultMap="memberCouponResultSet" property="couponList"/>
	</resultMap>
	
	<select id="idCheck" parameterType="string" resultType="_int">
		SELECT
				COUNT(*)
		  FROM
		  		TB_MEMBER
		 WHERE
		 		MEMBER_ID = #{checkId} 						
	</select>
	
	<select id="checkNick" parameterType="string" resultType="_int">
		SELECT
				COUNT(*)
		  FROM
		  		TB_MEMBER
		 WHERE
		 		NICKNAME = #{nickname} 						
	</select>
	
	<select id="checkPhone" parameterType="string" resultType="_int">
		SELECT
				COUNT(*)
		  FROM
		  		TB_MEMBER
		 WHERE
		 		PHONE = #{phone} 						
	</select>
	
	<select id="checkEmail" parameterType="string" resultType="_int">
		SELECT
				COUNT(*)
		  FROM
		  		TB_MEMBER
		 WHERE
		 		EMAIL = #{email} 						
	</select>	
	
	<select id="pwdCheck" parameterType="member" resultType="_int">
		SELECT
				COUNT(*)
		  FROM
		  		TB_MEMBER
		 WHERE
		 		MEMBER_PWD = #{memberPwd}
		   AND
		   		MEMBER_NO = #{memberNo}						
	</select>
	
	<select id="login" parameterType="member" resultMap="memberResultSet">
		SELECT
		       MEMBER_NO,
		       MEMBER_ID,
		       MEMBER_PWD,
		       MEMBER_NAME,
		       EMAIL,
		       NICKNAME,
		       PHONE,
		       MEMBER_STATUS,
		       TO_CHAR(ENROLL_DATE , 'YYYY/MM/DD') AS ENROLL_DATE, 
    		   TO_CHAR(MODIFY_DATE , 'YYYY/MM/DD') AS MODIFY_DATE,
    		   MEMBER_PROFILE
		  FROM
		       TB_MEMBER
		 WHERE
		       MEMBER_ID = #{memberId}
		   AND
		       MEMBER_STATUS != 'D'
	</select>

	<insert id="join" parameterType="member">
		INSERT
		  INTO
		  		TB_MEMBER
		VALUES
				(
				SEQ_MEMNO.NEXTVAL,
				#{memberId},
				#{memberPwd},
				#{memberName},
				#{email},
				#{nickname},
				#{phone},
				#{memberStatus},
				SYSDATE,
				SYSDATE,
				DEFAULT
				)
	</insert>
	
	<update id="update" parameterType="member">
		UPDATE
				TB_MEMBER
		   SET
		   		MEMBER_PWD = #{memberPwd},
		   		MEMBER_NAME = #{memberName},
		   		EMAIL = #{email},
		   		NICKNAME = #{nickname},
		   		PHONE = #{phone},
		   		MODIFY_DATE = SYSDATE,
		   		MEMBER_PROFILE = #{profile}
		 WHERE
		        MEMBER_NO = #{memberNo}
		   AND
		   	 	MEMBER_STATUS = 'C'
		   				
	</update>
	
	<update id="upProfile" parameterType="member">
		UPDATE
				TB_MEMBER
		   SET
		   		MEMBER_PROFILE = #{profile}
		 WHERE
		        MEMBER_NO = #{memberNo}
		   AND
		   	 	MEMBER_STATUS = 'C'
	</update>
	
	<select id="searchId" parameterType="member" resultType="string">
		SELECT
		        MEMBER_ID
		  FROM 
		        TB_MEMBER
		 WHERE
		        MEMBER_NAME = #{memberName}
		   AND
		        EMAIL = #{email}
		   AND
		   	 	MEMBER_STATUS = 'C'
	</select>
	
	<select id="searchPwd" parameterType="member" resultType="_int" >
		SELECT
		        MEMBER_NO
		  FROM 
		        TB_MEMBER
		 WHERE
		        MEMBER_ID = #{memberId}
		   AND
		        EMAIL = #{email}
		   AND
		   	 	MEMBER_STATUS = 'C'
	</select>
	
	<update id="updatePwd" parameterType="member">
		UPDATE
				TB_MEMBER
		   SET
		   		MEMBER_PWD = #{memberPwd}
		 WHERE
		        MEMBER_NO = #{memberNo}
		   AND
		   	 	MEMBER_STATUS = 'C'
	</update>
	
	<select id="selectMember" resultType="_int" parameterType="string">
		SELECT
		       MEMBER_NO
		  FROM
		       TB_MEMBER
		 WHERE 
		 	   MEMBER_ID = #{memberId}
	</select>
	
	<select id="selectUpMember" resultType="member" parameterType="_int">
		SELECT
		       MEMBER_NO,
		       MEMBER_ID,
		       MEMBER_PWD,
		       MEMBER_NAME,
		       EMAIL,
		       NICKNAME,
		       PHONE,
		       MEMBER_STATUS,
		       TO_CHAR(ENROLL_DATE , 'YYYY/MM/DD') AS ENROLL_DATE, 
    		   TO_CHAR(MODIFY_DATE , 'YYYY/MM/DD') AS MODIFY_DATE,
    		   MEMBER_PROFILE
		  FROM
		       TB_MEMBER
		 WHERE 
		 	   MEMBER_NO = #{memberNo}
	</select>
	
	<insert id="insertAnimals" parameterType="animal">
	    INSERT INTO TB_MEMBER_ANIMAL
	    VALUES
	        (
	        #{memberNo},
	        #{animalCode}
	        )
	</insert>	
	
	
	<insert id="insertCode" parameterType="com.kh.pet.member.model.vo.CertVO">
		INSERT INTO TB_CERT VALUES (#{who}, #{secret}, SYSDATE)
	</insert>
	
	<select id="validate" parameterType="com.kh.pet.member.model.vo.CertVO" resultType="com.kh.pet.member.model.vo.CertVO">
		SELECT
				WHO,
				CODE,
				WHEN
	      FROM
	      		TB_CERT
	     WHERE
	     		WHO = #{who}
	       AND
	       		CODE = #{secret}
	       AND
	       		WHEN BETWEEN SYSDATE - 3/24/60 AND SYSDATE									
	</select>
	
	<delete id="deleteCert" parameterType="com.kh.pet.member.model.vo.CertVO">
		delete TB_CERT where who = #{who} and code = #{secret}
	</delete>
	
	<select id="selectListCount" parameterType="hashmap" resultType="_int">
		SELECT 	
				COUNT(*) 
		  FROM
				TB_INFO
		LEFT JOIN
				TB_BOARD_ANIMAL USING(BOARD_NO)
		WHERE
		 		MEMBER_NO = #{memberNo}
		 AND
				BOARD_STATUS = 'Y'
		<if test="animal != 'A0'">
			AND ANIMAL_CODE = #{animal}
		</if>
		
		<if test="category != 'I0'">
			AND CATEGORY_CODE = #{category}
		</if>
	</select>
	
	<select id="selectBoard" parameterType="hashMap" resultMap="infoResultSet">
		SELECT 	
				BOARD_NO 
		  FROM
				TB_INFO
		<if test="animal != 'A0'">
		LEFT JOIN
				TB_BOARD_ANIMAL USING(BOARD_NO)
		</if>
		WHERE
		 		MEMBER_NO = #{memberNo}
		 AND
				BOARD_STATUS = 'Y'
		<if test="animal != 'A0'">
			AND ANIMAL_CODE = #{animal}
		</if>
		
		<if test="category != 'I0'">
			AND CATEGORY_CODE = #{category}
		</if>
		ORDER BY
				BOARD_NO DESC
	</select>
	
	<select id="selectMyBoard" parameterType="java.util.List" resultMap="infoResultSet">
		SELECT
		        BOARD_NO,
		        NICKNAME BOARD_WRITER,
		        ANIMAL_NAME,
		        CREATE_DATE,
		        BOARD_TITLE,
		        BOARD_CONTENT,
		        BOARD_COUNT,
		        NVL(BOARD_LIKE, 0) BOARD_LIKE,
		        REPLY_COUNT + COMMENT_COUNT SUM_COUNT,
		        BOARD_STATUS,
		        CATEGORY_CODE,
		        ATT_PATH,
		        CHANGE_NAME
		FROM
		        TB_INFO
		LEFT JOIN
		        TB_BOARD_ANIMAL USING(BOARD_NO)
		LEFT JOIN
		        TB_ANIMAL USING(ANIMAL_CODE)
		LEFT JOIN
		        TB_MEMBER USING(MEMBER_NO)
		LEFT JOIN
		        (
		        SELECT 
		                COUNT(*) BOARD_LIKE, 
		                BOARD_NO 
		        FROM 
		                TB_LIKE 
		        GROUP BY 
		                BOARD_NO
		        ) USING (BOARD_NO)
		LEFT JOIN
		        (
		        SELECT 
		                BOARD_NO,
		                COUNT(REPLY_NO) REPLY_COUNT,
		                COUNT(COMMENT_NO) COMMENT_COUNT
		        FROM 
		                TB_INFO 
		        LEFT JOIN
		                TB_REPLY USING(BOARD_NO)
		        LEFT JOIN
		                TB_COMMENT USING(REPLY_NO)
		        GROUP BY
		                BOARD_NO
		        ) USING (BOARD_NO)
		LEFT JOIN
		        TB_ATTACHMENT USING(BOARD_NO)
		WHERE
				BOARD_STATUS = 'Y'
		AND
				BOARD_NO IN
				<foreach collection="list" item="item" open="(" separator="," close=")">
			   		#{item.boardNo}
			  	</foreach>
		ORDER BY 
				BOARD_NO DESC
	</select>
	
	
	
	
	<!-- 여기서부터 지워도 되는건지 확인 부탁 -->
	
	<select id="selectBoardDetail" parameterType="_int" resultMap="infoResultSet">
		SELECT 
				BOARD_NO,
          		BOARD_WRITER,
				TB_ANIMAL.ANIMAL_NAME,
				TB_INFO.CREATE_DATE,
				TB_INFO.BOARD_TITLE,
				TB_INFO.BOARD_CONTENT,
				TB_INFO.BOARD_COUNT,
				BOARD_LIKE,
				ATT_PATH,
				CHANGE_NAME,
				SUM_COUNT,
				LIKECHECK,
				ROWNUM
      	  FROM (
			   SELECT
						BOARD_NO,
						BOARD_TITLE,
						BOARD_CONTENT,
                        BOARD_COUNT,
						TB_MEMBER.NICKNAME BOARD_WRITER,
						BO_CATEGORY_NAME,
						BO_CATEGORY_CODE CATEGORY_CODE,
						ANIMAL_CODE,
						ANIMAL_NAME,
						TB_INFO.CREATE_DATE CREATE_DATE,
						NVL(LIKE_COUNT, 0) BOARD_LIKE,
						REPLY_COUNT + COMMENT_COUNT SUM_COUNT,
						BOARD_STATUS,
						ROW_NUMBER() OVER(PARTITION BY BOARD_NO ORDER BY CATEGORY_CODE DESC ) AS RN
				FROM
						TB_INFO
				LEFT JOIN
						TB_BOARD_ANIMAL USING(BOARD_NO)
				LEFT JOIN
						TB_ANIMAL USING(ANIMAL_CODE)
				LEFT JOIN
						TB_BOARD_CATEGORY ON(BO_CATEGORY_CODE = CATEGORY_CODE)
				LEFT JOIN
						TB_MEMBER ON (TB_INFO.MEMBER_NO = TB_MEMBER.MEMBER_NO)
				LEFT JOIN
						(
						SELECT 
								COUNT(*) LIKE_COUNT, 
								BOARD_NO 
						FROM 
								TB_LIKE 
						GROUP BY 
								BOARD_NO
						) USING (BOARD_NO)
				LEFT JOIN
						(
						SELECT 
								BOARD_NO,
		                              COUNT(REPLY_NO) REPLY_COUNT,
		                              COUNT(COMMENT_NO) COMMENT_COUNT
						FROM 
								TB_INFO 
						LEFT JOIN
								TB_REPLY USING(BOARD_NO)
                        LEFT JOIN
                                TB_COMMENT USING(REPLY_NO)
                        GROUP BY
                                BOARD_NO
						) USING (BOARD_NO)				
		
				LEFT JOIN 
						TB_ATTACHMENT USING(BOARD_NO)
				ORDER BY 
						BOARD_NO
				)
		        JOIN
		              TB_INFO USING (BOARD_NO)
		        LEFT
		        JOIN
		              TB_BOARD_ANIMAL USING (BOARD_NO)
		        LEFT
		        JOIN
		              TB_ATTACHMENT USING(BOARD_NO)
		        LEFT
		        JOIN
		              TB_ANIMAL ON (TB_BOARD_ANIMAL.ANIMAL_CODE = TB_ANIMAL.ANIMAL_CODE)
		        JOIN
		              TB_MEMBER ON (TB_INFO.MEMBER_NO = TB_MEMBER.MEMBER_NO)
		        LEFT
		        JOIN
		        	(
		      SELECT
				       BOARD_NO,
				       COUNT(*) LIKECHECK
				  FROM
				       TB_LIKE
				 GROUP
				    BY
				       BOARD_NO) USING (BOARD_NO)
		 WHERE 
				TB_INFO.BOARD_STATUS = 'Y'
           AND
           		ATT_LEVEL = 1     
           AND
                TB_INFO.CATEGORY_CODE != 'I4'
		   AND  -->
  				BOARD_NO = #{boardNo} 
	
	</select>
	
	<select id="selectCategory" parameterType="hashmap" resultMap="infoResultSet">
		SELECT 
				BOARD_NO,
                BOARD_WRITER,
                TB_ANIMAL.ANIMAL_NAME,
                TB_INFO.CREATE_DATE,
                TB_INFO.BOARD_TITLE,
                TB_INFO.BOARD_CONTENT,
                TB_INFO.BOARD_COUNT,
                NVL(BOARD_LIKE, 0) BOARD_LIKE,
                ATT_PATH,
                CHANGE_NAME,
                SUM_COUNT
          FROM
				(
				SELECT
						BOARD_NO,
						BOARD_TITLE,
						BOARD_CONTENT,
                        BOARD_COUNT,
						TB_MEMBER.NICKNAME BOARD_WRITER,
						BO_CATEGORY_NAME,
						BO_CATEGORY_CODE CATEGORY_CODE,
						ANIMAL_CODE,
						ANIMAL_NAME,
						TB_INFO.CREATE_DATE CREATE_DATE,
						NVL(LIKE_COUNT, 0) BOARD_LIKE,
						REPLY_COUNT + COMMENT_COUNT SUM_COUNT,
						BOARD_STATUS,
						ROW_NUMBER() OVER(PARTITION BY BOARD_NO ORDER BY CATEGORY_CODE DESC ) AS RN
				FROM
						TB_INFO
				LEFT JOIN
						TB_BOARD_ANIMAL USING(BOARD_NO)
				LEFT JOIN
						TB_ANIMAL USING(ANIMAL_CODE)
				LEFT JOIN
						TB_BOARD_CATEGORY ON(BO_CATEGORY_CODE = CATEGORY_CODE)
				LEFT JOIN
						TB_MEMBER ON (TB_INFO.MEMBER_NO = TB_MEMBER.MEMBER_NO)
				LEFT JOIN
						(
						SELECT 
								COUNT(*) LIKE_COUNT, 
								BOARD_NO 
						FROM 
								TB_LIKE 
						GROUP BY 
								BOARD_NO
						) USING (BOARD_NO)
				LEFT JOIN
						(
						SELECT 
								BOARD_NO,
                                COUNT(REPLY_NO) REPLY_COUNT,
                                COUNT(COMMENT_NO) COMMENT_COUNT
						FROM 
								TB_INFO 
						LEFT JOIN
								TB_REPLY USING(BOARD_NO)
                        LEFT JOIN
                                TB_COMMENT USING(REPLY_NO)
                        GROUP BY
                                BOARD_NO
						) USING (BOARD_NO)				
				
				LEFT JOIN 
						TB_ATTACHMENT USING(BOARD_NO)
				ORDER BY 
						BOARD_NO
				)
          JOIN
                TB_INFO USING (BOARD_NO)
          LEFT
          JOIN
                TB_BOARD_ANIMAL USING (BOARD_NO)
          LEFT
          JOIN
                TB_ATTACHMENT USING(BOARD_NO)
          LEFT
          JOIN
                TB_ANIMAL ON (TB_BOARD_ANIMAL.ANIMAL_CODE = TB_ANIMAL.ANIMAL_CODE)
          JOIN
                TB_MEMBER ON (TB_INFO.MEMBER_NO = TB_MEMBER.MEMBER_NO)
		WHERE 
				TB_INFO.BOARD_STATUS = 'Y'
          AND
                RN = 1
   		  AND 
   				MEMBER_NO = #{memberNo}
   		  AND 
   		  		TB_ANIMAL.ANIMAL_NAME = #{animalName}
	</select>
	
	<!-- 여기서부터 지워도 되는건지 확인 부탁 -->
	
	
	
	
	
	
	
	
	
	
	
	
	
	
</mapper>